<!--
Test that the victim tracker allows robots to find victims, and broadcast help requests, along with broadcast updates when they recieve new victim info.

PHASE 1: Two robots are in the environment. One of them (test_bot_1) finds a victim (person_1) but cannot confirm it, so it broadcasts victim confirm task. 

ACTION 1:
Activate move_to_goal_ms
rosservice call /arc/test_bot_1/arc_base/toggle_schema "schema:
- name: 'move_to_goal_ms'
  value: true"

ACTION 2:
Send a move_to_goal request to test_bot_1 which directs it to a potential victim
rosservice call /arc/test_bot_1/navigation_adapter/move_to_goal "priority: 0
pose:
  position:
    x: 7.7
    y: 6.2
    z: 0.0
  orientation:
    x: 0.0
    y: 0.0
    z: 0.0
    w: 1.0"


PHASE 2
test_bot_2 receives the task and goes to confirm victim. test_bot_2 finds that the victim is actually not a victim... Upon doing so it broadcasts result. Both robots store the result in their victim tracker...

PHASE 3:
test_bot_1 moves around again and finds victim 11 but since it has only the basic victim detector test_bot_1 broadcasts another request.

test_bot_1 keeps moving to another victim (person 4) while concurrently test_bot_2 is heading to check victim 11. 

PHASE 4:
test_bot_2 confirms victim 11 is in fact a victim and broadcasts this result. Both robots update internal victim trackers. 

PHASE 5: test_bot_1 realizes no robot has helped it yet so it broadcasts help request again. test_bot_2 then accepts and goes to person 4 and confirms it's not a victim.
test_bot_2 broadcasts this result. 

PHAES 6: Robots output their victim tracker states, they should all be equal .
 -->

<launch>
  <master auto="start"/>
  <arg name="robot_type" default="debrisbot"/>
  <param name="/use_sim_time" value="true"/>
  <node pkg="map_server" type="map_server" name="map_server" args="$(find arc_stage)/maps/config/test/test_clean_debris_ms.yaml" respawn="false" >
    <param name="frame_id" value="/map" />
  </node> 

<group ns="arc">
<!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find arc_navigation)/single_robot.rviz" /> -->
<group ns="test_bot_1">
	<param name="tf_prefix" value="test_bot_1" />
	<node pkg="arc_tasks" type="task_confirm_victim_server" name="task_confirm_victim_server" output="screen">
		<param name="robot_name" value="test_bot_1"/>
	</node>
	<node pkg="arc_tasks" type="task_confirm_victim_client" name="task_confirm_victim_client" output="screen"/> 

	<node pkg="arc_core" type="victim_tracker" name="victim_tracker" output="screen">
	</node>
<node pkg="arc_core" type="task_handler" name="task_handler" output="screen">
        <rosparam param="valid_tasks">["confirm_victim","move_to_goal"]</rosparam>
    </node>
  <include file="$(find arc_control)/launch/robots/$(arg robot_type)/$(arg robot_type)_behaviour.launch">
	<arg name="robot_name" value="test_bot_1"/>
</include>
</group>
  <node pkg="arc_stage" type="arc_stage" name="arc_stage" args="-u $(find arc_stage)/world/test_victim_tracker.world" respawn="false">
    <param name="base_watchdog_timeout" value="0.2"/>
  </node>
</group>
</launch>
